#include "HUSKYLENS.h"
#include "SoftwareSerial.h"

HUSKYLENS huskylens;
SoftwareSerial huskySerial(8, 9); // RX = D8, TX = D9

// Dimens√µes da imagem da HuskyLens (resolu√ß√£o padr√£o)
const int IMG_WIDTH  = 320;
const int IMG_HEIGHT = 240;

// Ponto central como (0, 0), estilo cartesiano
const int X_CENTER = IMG_WIDTH  / 2;
const int Y_CENTER = IMG_HEIGHT / 2;

void setup() {
  Serial.begin(9600);
  delay(1000);

  Serial.println("üîç A iniciar HuskyLens (modo Object Tracking)...");

  huskySerial.begin(9600);
  if (!huskylens.begin(huskySerial)) {
    Serial.println("‚ùå ERRO: HuskyLens n√£o detetada!");
    while (true); // trava o programa
  }

  Serial.println("‚úÖ HuskyLens pronta. A ler objetos...");
}

void loop() {
  if (huskylens.request()) {
    if (huskylens.available()) {
      HUSKYLENSResult result = huskylens.read();

      // Posi√ß√£o bruta (X,Y) da HuskyLens
      int x_raw = result.xCenter;
      int y_raw = result.yCenter;

      // Convers√£o para referencial cartesiano centrado
      int x_cart = x_raw - X_CENTER;         // Esquerda (-) / Direita (+)
      int y_cart = -(y_raw - Y_CENTER);      // Cima (+) / Baixo (-)

      // Impress√£o dos valores
      Serial.print("üéØ Objeto detetado | ");
      Serial.print("Centro (X, Y): ");
      Serial.print(x_raw);
      Serial.print(", ");
      Serial.print(y_raw);
      Serial.print("  ‚û§  Referencial: ");
      Serial.print(x_cart);
      Serial.print(", ");
      Serial.println(y_cart);
    } else {
      Serial.println("‚ö†Ô∏è Nenhum objeto detetado.");
    }
  } else {
    Serial.println("‚ùå ERRO: HuskyLens n√£o comunic√°vel!");
  }

  delay(300); // tempo entre leituras
}
