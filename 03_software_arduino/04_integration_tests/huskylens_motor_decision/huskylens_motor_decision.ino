
// ============================================================================
// ü§ñ AzorCAR ‚Äì Etapa 5: Controlo dos motores com base na HuskyLens
// ----------------------------------------------------------------------------
// Modo recomendado: "Object Tracking" ou "Color Recognition"
// IDs:
//   ‚Üí ID 1 ‚Üí virar √† ESQUERDA (ambos os motores giram para esquerda)
//   ‚Üí ID 2 ‚Üí virar √† DIREITA (ambos os motores giram para direita)
//   ‚Üí ID 3 ‚Üí PARAR
// ----------------------------------------------------------------------------
// Substitu√≠mos os LEDs por controlo real dos motores (via driver L298P)
// Arduino UNO R4 WiFi + HuskyLens via SoftwareSerial (pinos 8 e 9)
// ============================================================================

#include "HUSKYLENS.h"         // Biblioteca oficial da HuskyLens
#include "SoftwareSerial.h"    // Comunica√ß√£o UART com a c√¢mara

// üì° Comunica√ß√£o serial com a HuskyLens
SoftwareSerial huskySerial(8, 9); // RX = D8, TX = D9
HUSKYLENS huskylens;

// ----------------------------
// Pinos do driver L298P
// ----------------------------
const int E1 = 10; // PWM motor A (direita)
const int M1 = 12; // Dire√ß√£o motor A
const int E2 = 11; // PWM motor B (esquerda)
const int M2 = 13; // Dire√ß√£o motor B

int velocidade = 200; // Velocidade padr√£o dos motores (PWM: 0 a 255)

void setup() {
  Serial.begin(9600);
  delay(1000);
  Serial.println("üîÑ In√≠cio do sistema AzorCAR ‚Äì Etapa 5");

  // Inicializa os pinos dos motores
  pinMode(M1, OUTPUT);
  pinMode(M2, OUTPUT);
  pinMode(E1, OUTPUT);
  pinMode(E2, OUTPUT);
  parar(); // Por seguran√ßa, come√ßa parado

  // Inicia a comunica√ß√£o com a HuskyLens
  huskySerial.begin(9600);
  delay(300);
  if (!huskylens.begin(huskySerial)) {
    Serial.println("‚ùå ERRO: HuskyLens n√£o detetada!");
    while (1); // Bloqueia o programa
  } else {
    Serial.println("‚úÖ HuskyLens pronta.");
  }
}

void loop() {
  // Solicita dete√ß√µes da HuskyLens
  if (huskylens.request()) {
    if (huskylens.available()) {
      HUSKYLENSResult result = huskylens.read();
      int id = result.ID;

      Serial.print("üéØ ID Detetado: ");
      Serial.println(id);

      // A√ß√µes com base no ID detetado
      switch (id) {
        case 1:
          Serial.println("‚Ü™Ô∏è Comando: virar √† ESQUERDA");
          virarEsquerda();
          break;

        case 2:
          Serial.println("‚Ü©Ô∏è Comando: virar √† DIREITA");
          virarDireita();
          break;

        case 3:
          Serial.println("‚õî Comando: PARAR");
          parar();
          break;

        default:
          Serial.println("‚ö†Ô∏è ID desconhecido ‚Äì manter estado anterior.");
          break;
      }
    } else {
      Serial.println("üö´ Nenhum objeto vis√≠vel ‚Äì parar por seguran√ßa.");
      parar();
    }
  } else {
    Serial.println("‚ùå ERRO: Falha na comunica√ß√£o com a HuskyLens.");
    parar();
  }

  delay(200); // Tempo de resposta controlado
}

// ------------------------
// Fun√ß√µes de movimento
// ------------------------
void virarEsquerda() {
  digitalWrite(M1, LOW);   // Motor A ‚Üí tr√°s
  digitalWrite(M2, HIGH);  // Motor B ‚Üí frente
  analogWrite(E1, velocidade);
  analogWrite(E2, velocidade);
}

void virarDireita() {
  digitalWrite(M1, HIGH);  // Motor A ‚Üí frente
  digitalWrite(M2, LOW);   // Motor B ‚Üí tr√°s
  analogWrite(E1, velocidade);
  analogWrite(E2, velocidade);
}

void parar() {
  analogWrite(E1, 0);
  analogWrite(E2, 0);
  digitalWrite(M1, LOW);
  digitalWrite(M2, LOW);
}
