// ==========================================================================
// ü§ñ AzorCAR ‚Äì Aproxima√ß√£o autom√°tica baseada em HuskyLens (Desafio I)
// ==========================================================================
// ‚úÖ Deteta uma cor de cada vez com a HuskyLens (modo Color Recognition)
// ‚úÖ Mede o tamanho da caixa detetada (largura e altura)
// ‚úÖ Decide automaticamente se deve andar para a frente, para tr√°s ou parar
// ‚úÖ Movimenta-se por pequenos passos (300 ms) e reavalia continuamente
// ‚úÖ Totalmente comentado para facilitar calibra√ß√£o e adapta√ß√£o
// ==========================================================================

#include <SoftwareSerial.h>
#include <HUSKYLENS.h>
#include <Wire.h>
#include <U8x8lib.h>

// -------------------- HuskyLens via UART --------------------
SoftwareSerial huskySerial(8, 9);  // RX, TX para liga√ß√£o √† HuskyLens
HUSKYLENS huskylens;

// -------------------- OLED SH1106 1.3‚Äù via I2C --------------------
U8X8_SH1106_128X64_NONAME_HW_I2C u8x8;

// -------------------- Driver de motores L298P --------------------
const int E1 = 10;  // PWM motor direito
const int M1 = 12;  // Sentido motor direito
const int E2 = 11;  // PWM motor esquerdo
const int M2 = 13;  // Sentido motor esquerdo

// -------------------- Configura√ß√µes de movimento --------------------
const int VELOCIDADE = 100;      // üîß Velocidade dos motores (0‚Äì255)
const int DURACAO_PASSO = 300;   // üîß Tempo de cada passo de movimento (em ms)

// -------------------- Calibra√ß√£o dos limites de aproxima√ß√£o --------------------
// Estes limites definem a zona "ideal" de dist√¢ncia ao alvo (ex: entre 20‚Äì40 cm)
// Os valores s√£o obtidos observando a largura e altura da caixa detetada

const int W_MIN = 50;   // üîß Se largura < W_MIN ‚Üí est√° longe ‚Üí anda para frente
const int W_MAX = 90;   // üîß Se largura > W_MAX ‚Üí est√° muito perto ‚Üí anda para tr√°s

const int H_MIN = 45;   // üîß Se altura < H_MIN ‚Üí longe
const int H_MAX = 85;   // üîß Se altura > H_MAX ‚Üí muito perto

// -------------------- Identifica√ß√£o das cores treinadas --------------------
String corPorID(int id) {
  switch (id) {
    case 1: return "Verde";
    case 2: return "Amarelo";  // ‚Üê usar√°s esta na prova
    case 3: return "Magenta";
    case 4: return "Azul";
    default: return "Desconhecida";
  }
}

// -------------------- Fun√ß√µes de controlo dos motores --------------------
void andarFrente(int vel, int tempo) {
  digitalWrite(M1, 1);
  digitalWrite(M2, 1);
  analogWrite(E1, vel);
  analogWrite(E2, vel);
  delay(tempo);
  parar();
}

void andarTras(int vel, int tempo) {
  digitalWrite(M1, 0);
  digitalWrite(M2, 0);
  analogWrite(E1, vel);
  analogWrite(E2, vel);
  delay(tempo);
  parar();
}

void parar() {
  analogWrite(E1, 0);
  analogWrite(E2, 0);
  digitalWrite(M1, 0);
  digitalWrite(M2, 0);
}

// -------------------- Setup --------------------
void setup() {
  Serial.begin(115200);       // Comunica√ß√£o Serial para calibra√ß√£o
  huskySerial.begin(9600);    // Comunica√ß√£o com HuskyLens
  u8x8.begin();
  u8x8.setFont(u8x8_font_amstrad_cpc_extended_r);               // Inicia OLED

  // Pinos dos motores
  pinMode(E1, OUTPUT);
  pinMode(M1, OUTPUT);
  pinMode(E2, OUTPUT);
  pinMode(M2, OUTPUT);
  parar();  // Garante paragem ao ligar

  // Verifica HuskyLens
  if (!huskylens.begin(huskySerial)) {
    Serial.println("‚ùå HuskyLens n√£o encontrada!");
    while (true);
  }

  Serial.println("‚úÖ AzorCAR pronto ‚Äì Aproxima√ß√£o autom√°tica passo-a-passo.");
  Serial.println("Observa W/H no Serial para ajustar os limites.");
}

// -------------------- Loop principal --------------------
void loop() {
  // Solicita dete√ß√£o √† HuskyLens
  if (huskylens.request()) {
    if (huskylens.available()) {
      HUSKYLENSResult result = huskylens.read();

      // Extrai dados
      int id = result.ID;
      int largura = result.width;
      int altura = result.height;
      String cor = corPorID(id);

      // -------------------- Decis√£o baseada em W e H --------------------
      String acao;

      if (largura < W_MIN || altura < H_MIN) {
        acao = "FRENTE";
        andarFrente(VELOCIDADE, DURACAO_PASSO);
      }
      else if (largura > W_MAX || altura > H_MAX) {
        acao = "TRAS";
        andarTras(VELOCIDADE, DURACAO_PASSO);
      }
      else {
        acao = "PARAR";
        parar();
      }

      // -------------------- Sa√≠da no Serial Monitor --------------------
      Serial.print("ID ");
      Serial.print(id);
      Serial.print(" (");
      Serial.print(cor);
      Serial.print(") | W,H: ");
      Serial.print(largura);
      Serial.print("x");
      Serial.print(altura);
      Serial.print(" | A√ß√£o: ");
      Serial.println(acao);

      // ---------- OLED: vers√£o est√°vel com U8x8 ----------
static String ultimaLinha = "";
String novaLinha = "ID" + String(id) + ": " + acao;
if (novaLinha != ultimaLinha) {
  u8x8.clear();
  u8x8.drawString(0, 1, novaLinha.c_str());  // linha 1
  ultimaLinha = novaLinha;
}
    }
    else {
      // Nada detetado ‚Üí parar motores + feedback
      Serial.println("Nenhuma cor detectada.");
      parar();

      
      
      
      
    }
  }

  delay(300); // Aguarda antes da pr√≥xima leitura
}
